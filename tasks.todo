Chat Application Todo List:
    Core Functionality:
        ✔ Group message: Allow passing public messages
        ✔ Private message: Allow passing private messages with the format /w [name] [message]
        ✔ Make names unique: Ensure usernames are unique across all connected clients @done(24-07-10 09:51)
        ✔ Validate username: If username is less than 2 char or empty, retry 3 times
        ✔ Add timestamps to messages for better context
        ✔ Reply functionality: Implement reply functionality with /reply [message] @started(24-07-10 09:51) @done(24-07-10 10:11) @lasted(20m24s)
        ✔ Client re-establish connection with exponential retry @done(24-07-14 15:38)
    User Interface:
        ✔ Send messages from server with prefix (MSG, WSP)
        ✔ Display allowed commands when someone joins. This should be handled on client side. @started(24-07-15 00:04) @done(24-07-15 00:32) @lasted(28m41s)
        ✔ Implement Active User display: @done(24-07-15 15:44)
        ```
        Active Users (25): Alice, Bob, Charlie [+22 more] (Use /users for full list)
        ----------------------------------
        [Chat messages appear here]
        ----------------------------------
        Your message:
        ```

    Chat History:
        ✔ Add timestamp to all message types @done(24-07-15 23:43)
        ✔ Add new data structure to save history to memory @done(24-07-20 17:28)
            ✔ Implement a simple slice for general messages @done(24-07-20 17:28)
        ✔ Filter messages before dispatching them to clients @done(24-07-20 17:28)
            ✔ Delete private messages if user is not recipient or sender @done(24-07-20 17:28)
            ✔ Ensure private messages are not exposed to unintended recipients @done(24-07-20 17:28)
        ✔ Store chat history for late-joining clients (limit to ~200 messages) @done(24-07-20 22:59)
        ✔ Implement /history command @done(24-07-20 17:28)
            ✔ Return recent messages (up to 200) @done(24-07-20 22:59)
        ✔ Client should format timestamps carefully because some messages are from past @done(24-07-20 17:31)
            ✔ Implement a function to format timestamps relative to current time @done(24-07-20 17:31)
        ✔ Server should persist history to file and restore on restart @done(24-07-20 17:29)
            ✔ Implement SaveToFile and LoadFromFile functions @done(24-07-20 17:31)
            ✔ Should keep saving and checking on separate goroutine @done(24-07-20 17:29)
        ✔ Disregard time difference between client and server since this app is only suppose to work locally. @done(24-07-20 17:32)
        ☐ Connect this chat history to auth to prevent users to access other peoples chat histories, because if someone enters chat with someone elses name they will be able to read private message.
    Protocol and Security:
        ✔ Add Protocol
        ✔ Implement protocol: Client read
        ✔ Implement protocol: Server sent
        ✔ Implement protocol: Client sent @done(24-07-07 12:38)
        ✔ Implement protocol: Server read @done(24-08-22 00:50)
        Message encryption: Implement end-to-end encryption using:
            ✔ Initial Setup: @done(24-07-22 01:17)

            The server generates a unique group key for the chat.
            ✔ User Joins: @done(24-07-22 01:17)

            Each user (e.g., Alice, Bob, Charlie) connects to the server and provides their public key.
            The server encrypts the group key with each user’s public key and sends it to them.
            Users decrypt the group key using their private keys.
            ☐ Sending Messages:

            Users encrypt their messages with the shared group key.
            The server forwards the encrypted messages to all group members.

            ☐ Rotating Group Key:
            Perodically rotate keys in order not to leak group key. Start with every 30 sec.

            ☐ History:
            Encrypt chat messages using a separate secure key stored in env file.
            Decrypt them using history key and re-encrypt them when requested using group key.
    Advanced Features:
        Auth:
            ✔ Persist everything on sqlite @done(24-08-08 00:29)
        Chatrooms:
            ☐ Allow users to create and join different chatrooms
            ☐ Ensure it server deleted private chat after 1 minute inactivity
            ☐ Allow clients to switch between private chats and group chat
            ☐ Implement commands: /create, /join, /leave, /kick, /ban

            ## User Actions
            ☐ Implement `/create` command
              ☐ Format: `/create roomName roomPassword roomSize`
              ☐ Make `roomPassword` and `roomSize` optional
            ☐ Implement join functionality

            ## Protocols
            ☐ Implement Create Protocol: `ROOM|Oz|CREATE|testName|Test1234.|2`
            ☐ Implement Join Protocol: `ROOM|John|JOIN|testName|Test1234.`

            ## Server Structure
            ☐ Create `roomManager` module
              ☐ Implement in-memory storage for rooms
              ☐ Create a map of rooms
              ☐ Isolate from `net.Conn`
              ☐ Accept decoded messages
              ☐ Implement function mapping based on protocol

            ## Data Structures
            - Implement `roomDetails` struct:
              `
              type roomDetails struct {
                  roomName string
                  roomPassword string
                  roomSize int
                  owner string
                  users []string
                  lastActivity int64
                  bannedUsers []string
                  visibility string
              }
              `

            ## Room-specific Methods
            - [ ] Implement `handleJoin`
            - [ ] Implement `handleLeave`
            - [ ] Implement `handleGetUsers`
            - [ ] Implement `handleCreate`
            - [ ] Implement `clearInactive`
              - [ ] Remove room after 1 minute of inactivity
            - [ ] Implement `handleBan`
              - [ ] Ensure only callable by owner
            - [ ] Implement `handleKick`
              - [ ] Ensure only callable by owner

            ## Manager-specific Methods
            - [ ] Implement `getActiveRooms`

            ## Room Management Logic
            - [ ] Update `lastActivity` on message receive, user join, or user leave
            - [ ] Update `users` list on join or leave
            - [ ] Broadcast `users` list to all channel members on join or leave

            ## Protocol Implementation
            ### Create Room
            - [ ] Request: `ROOM|1629123456|CREATE|Oz|testRoom|password123|10|visibility=public\r\n`
            - [ ] Success: `ROOM|1629123457|CREATE|Oz|testRoom|password123|10|status=success\r\n`
            - [ ] Fail: `ROOM|1629123457|CREATE|Oz|testRoom|password123|10|status=fail,reason=room_already_exists\r\n`

            ### Join Room
            - [ ] Request: `ROOM|1629123458|JOIN|John|testRoom|password123|-\r\n`
            - [ ] Success: `ROOM|1629123459|JOIN|John|testRoom|password123|-|status=success\r\n`
            - [ ] Fail: `ROOM|1629123459|JOIN|John|testRoom|password123|-|status=fail,reason=incorrect_password\r\n`

            ### Leave Room
            - [ ] Request: `ROOM|1629123460|LEAVE|John|testRoom|-|-\r\n`
            - [ ] Success: `ROOM|1629123461|LEAVE|John|testRoom|-|-|status=success\r\n`
            - [ ] Fail: `ROOM|1629123461|LEAVE|John|testRoom|-|-|status=fail,reason=not_in_room\r\n`

            ### Kick User
            - [ ] Request: `ROOM|1629123462|KICK|Oz|testRoom|target_user=John-\r\n`
            - [ ] Success: `ROOM|1629123463|KICK|Oz|testRoom|target_user=John;status=success\r\n`
            - [ ] Fail: `ROOM|1629123463|KICK|Oz|testRoom|target_user=John;status=fail,reason=not_owner\r\n`

            ### Ban User
            - [ ] Request: `ROOM|1629123464|BAN|Oz|testRoom|target_user=John\r\n`
            - [ ] Success: `ROOM|1629123465|BAN|Oz|testRoom|target_user=John'status=success\r\n`
            - [ ] Fail: `ROOM|1629123465|BAN|Oz|testRoom|target_user=John;status=fail;reason=user_not_found\r\n`

            ### Get Room Users
            - [ ] Request: `ROOM|1629123466|GET_USERS|John|testRoom|-|-\r\n`
            - [ ] Success: `ROOM|1629123467|GET_USERS|John|testRoom|-|-|status=success,users=Oz,Alice,Bob\r\n`
            - [ ] Fail: `ROOM|1629123467|GET_USERS|John|testRoom|-|-|status=fail,reason=room_not_found\r\n`

            ### Get Active Rooms
            - [ ] Request: `ROOM|1629123468|GET_ROOMS|John|-|-|-\r\n`
            - [ ] Success: `ROOM|1629123469|GET_ROOMS|John|-|-|-|status=success,rooms=testRoom,funRoom,workRoom\r\n`
            - [ ] Fail: `ROOM|1629123469|GET_ROOMS|John|-|-|-|status=fail,reason=no_active_rooms\r\n`

            Presence System:
                ☐ Show user statuses (online, away, busy, etc.)
                ☐ Allow users to set custom status message`
            Typing Indicators (for private chats):
                ☐ Implement client-side typing detection
                    - Send "typing" signal when user starts typing in a private chat
                    - Send "stopped typing" signal after user pauses (e.g., 2 seconds of inactivity)
                ☐ Implement server-side handling of typing signals
                    - Forward typing status only to the relevant chat partner
                ☐ Add UI element for displaying typing status in private chats
                    - Show "[User] is typing..." below the last message in the chat
                    - Ensure it updates smoothly without disrupting the chat view
                ☐ Implement a timeout mechanism for typing indicators
                    - Automatically clear the typing indicator if no updates are received for a certain period (e.g., 5 seconds)
        Command System:
            ✔ Create a robust command system (e.g. /mute, /unmute, /block) @done(24-08-03 15:21)
                Help:
                    ✔ Client only. Show relevant commands @done(24-07-16 00:42) - Later change to commands ui box
                Unlock/Block:
                    ✔ When a client blocks someone, the client's messages won't be sent to or received by the blocked user. @done(24-08-03 15:21)
                    ✔ Server shouldn't broadcast to blocked user. Similar whisper, but everyone except that user. @done(24-08-03 15:21)
                    ✔ Blocked user's active users list should exclude blocker. For instance, if Oz blocks John, John shouldn't able to see Oz in active list. @done(24-08-03 15:21)
                Mute:
                    ✔ Don't show muted users texts @done(24-07-31 01:17)
        Notification System:
        ✔   Notify users of mentions or important messages when not actively viewing chat @done(24-08-03 20:14)
        Active User Management:
            ✔ Server: Maintain list/map of all active users @done(24-07-16 00:53)
            ✔ Server: Send updates with total count and subset of names @done(24-07-16 00:53)
            ✔ Client: Store full list of users @done(24-07-16 00:53)
            ✔ Client: Implement /users command to show full list @done(24-07-16 00:53)
        Performance and Security:
            ☐ Implement rate limiting to prevent spam and abuse
    Bug Fixes:
        ✔ Don't let clients send empty message @done(24-07-30 00:52)
        ✔ If someone new joins current input clears itself @done(24-07-30 00:52)
            Fixed this by implement this completely new ui from scratch using termui
        ✔ Fix: Server locks when two users join simultaneously
        ✔ Check whisper logic: Ensure robustness and correctness
        ✔ Fix: when actual message contains our separator "|" parsing fails. @done(24-08-03 17:29)
            Fixed this by cutting exact parts instead of splitting entire text with given separator.
        ✔ When client reconnects after successful connection it required one more extra input before sending username. @done(24-07-14 16:04)
            Make sure all goroutines are closed before retrying using waitGroups and additional channel called done @Solution

Implementation Order:
    ✔ Command System @done(24-08-03 15:24)
    ✔ Notification System @done(24-08-03 20:14)
    ✔ Connect chat history to auth @done(24-08-21 23:32)
    ✔ Auth system @done(24-08-08 00:30)
    ☐ Chatrooms
    ☐ Presence System
    ☐ Typing Indicators (for private chats)
    ☐ Performance and Security
    ☐ Message encryption
